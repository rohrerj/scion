// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/co/reservationstorage/backend (interfaces: DB)

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	context "context"
	sql "database/sql"
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	e2e "github.com/scionproto/scion/go/co/reservation/e2e"
	segment "github.com/scionproto/scion/go/co/reservation/segment"
	backend "github.com/scionproto/scion/go/co/reservationstorage/backend"
	addr "github.com/scionproto/scion/go/lib/addr"
	reservation "github.com/scionproto/scion/go/lib/colibri/reservation"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddToAdmissionList mocks base method.
func (m *MockDB) AddToAdmissionList(arg0 context.Context, arg1 time.Time, arg2 net.IP, arg3, arg4 string, arg5 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToAdmissionList", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToAdmissionList indicates an expected call of AddToAdmissionList.
func (mr *MockDBMockRecorder) AddToAdmissionList(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToAdmissionList", reflect.TypeOf((*MockDB)(nil).AddToAdmissionList), arg0, arg1, arg2, arg3, arg4, arg5)
}

// BeginTransaction mocks base method.
func (m *MockDB) BeginTransaction(arg0 context.Context, arg1 *sql.TxOptions) (backend.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", arg0, arg1)
	ret0, _ := ret[0].(backend.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockDBMockRecorder) BeginTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockDB)(nil).BeginTransaction), arg0, arg1)
}

// CheckAdmissionList mocks base method.
func (m *MockDB) CheckAdmissionList(arg0 context.Context, arg1 time.Time, arg2 net.IP, arg3 addr.IA, arg4 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAdmissionList", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAdmissionList indicates an expected call of CheckAdmissionList.
func (mr *MockDBMockRecorder) CheckAdmissionList(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdmissionList", reflect.TypeOf((*MockDB)(nil).CheckAdmissionList), arg0, arg1, arg2, arg3, arg4)
}

// Close mocks base method.
func (m *MockDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDB)(nil).Close))
}

// DeleteE2ERsv mocks base method.
func (m *MockDB) DeleteE2ERsv(arg0 context.Context, arg1 *reservation.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteE2ERsv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteE2ERsv indicates an expected call of DeleteE2ERsv.
func (mr *MockDBMockRecorder) DeleteE2ERsv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteE2ERsv", reflect.TypeOf((*MockDB)(nil).DeleteE2ERsv), arg0, arg1)
}

// DeleteExpiredAdmissionEntries mocks base method.
func (m *MockDB) DeleteExpiredAdmissionEntries(arg0 context.Context, arg1 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredAdmissionEntries", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredAdmissionEntries indicates an expected call of DeleteExpiredAdmissionEntries.
func (mr *MockDBMockRecorder) DeleteExpiredAdmissionEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredAdmissionEntries", reflect.TypeOf((*MockDB)(nil).DeleteExpiredAdmissionEntries), arg0, arg1)
}

// DeleteExpiredIndices mocks base method.
func (m *MockDB) DeleteExpiredIndices(arg0 context.Context, arg1 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredIndices", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredIndices indicates an expected call of DeleteExpiredIndices.
func (mr *MockDBMockRecorder) DeleteExpiredIndices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredIndices", reflect.TypeOf((*MockDB)(nil).DeleteExpiredIndices), arg0, arg1)
}

// DeleteSegmentRsv mocks base method.
func (m *MockDB) DeleteSegmentRsv(arg0 context.Context, arg1 *reservation.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegmentRsv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegmentRsv indicates an expected call of DeleteSegmentRsv.
func (mr *MockDBMockRecorder) DeleteSegmentRsv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegmentRsv", reflect.TypeOf((*MockDB)(nil).DeleteSegmentRsv), arg0, arg1)
}

// GetActiveEERs mocks base method.
func (m *MockDB) GetActiveEERs(arg0 context.Context) ([]*e2e.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveEERs", arg0)
	ret0, _ := ret[0].([]*e2e.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveEERs indicates an expected call of GetActiveEERs.
func (mr *MockDBMockRecorder) GetActiveEERs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveEERs", reflect.TypeOf((*MockDB)(nil).GetActiveEERs), arg0)
}

// GetAllE2ERsvs mocks base method.
func (m *MockDB) GetAllE2ERsvs(arg0 context.Context) ([]*e2e.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllE2ERsvs", arg0)
	ret0, _ := ret[0].([]*e2e.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllE2ERsvs indicates an expected call of GetAllE2ERsvs.
func (mr *MockDBMockRecorder) GetAllE2ERsvs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllE2ERsvs", reflect.TypeOf((*MockDB)(nil).GetAllE2ERsvs), arg0)
}

// GetAllSegmentRsvs mocks base method.
func (m *MockDB) GetAllSegmentRsvs(arg0 context.Context) ([]*segment.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSegmentRsvs", arg0)
	ret0, _ := ret[0].([]*segment.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSegmentRsvs indicates an expected call of GetAllSegmentRsvs.
func (mr *MockDBMockRecorder) GetAllSegmentRsvs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSegmentRsvs", reflect.TypeOf((*MockDB)(nil).GetAllSegmentRsvs), arg0)
}

// GetE2ERsvFromID mocks base method.
func (m *MockDB) GetE2ERsvFromID(arg0 context.Context, arg1 *reservation.ID) (*e2e.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetE2ERsvFromID", arg0, arg1)
	ret0, _ := ret[0].(*e2e.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetE2ERsvFromID indicates an expected call of GetE2ERsvFromID.
func (mr *MockDBMockRecorder) GetE2ERsvFromID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetE2ERsvFromID", reflect.TypeOf((*MockDB)(nil).GetE2ERsvFromID), arg0, arg1)
}

// GetE2ERsvsOnSegRsv mocks base method.
func (m *MockDB) GetE2ERsvsOnSegRsv(arg0 context.Context, arg1 *reservation.ID) ([]*e2e.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetE2ERsvsOnSegRsv", arg0, arg1)
	ret0, _ := ret[0].([]*e2e.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetE2ERsvsOnSegRsv indicates an expected call of GetE2ERsvsOnSegRsv.
func (mr *MockDBMockRecorder) GetE2ERsvsOnSegRsv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetE2ERsvsOnSegRsv", reflect.TypeOf((*MockDB)(nil).GetE2ERsvsOnSegRsv), arg0, arg1)
}

// GetEgDemand mocks base method.
func (m *MockDB) GetEgDemand(arg0 context.Context, arg1 addr.AS, arg2 uint16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEgDemand", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEgDemand indicates an expected call of GetEgDemand.
func (mr *MockDBMockRecorder) GetEgDemand(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEgDemand", reflect.TypeOf((*MockDB)(nil).GetEgDemand), arg0, arg1, arg2)
}

// GetInDemand mocks base method.
func (m *MockDB) GetInDemand(arg0 context.Context, arg1 addr.AS, arg2 uint16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInDemand", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInDemand indicates an expected call of GetInDemand.
func (mr *MockDBMockRecorder) GetInDemand(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInDemand", reflect.TypeOf((*MockDB)(nil).GetInDemand), arg0, arg1, arg2)
}

// GetInterfaceUsageEgress mocks base method.
func (m *MockDB) GetInterfaceUsageEgress(arg0 context.Context, arg1 uint16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceUsageEgress", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterfaceUsageEgress indicates an expected call of GetInterfaceUsageEgress.
func (mr *MockDBMockRecorder) GetInterfaceUsageEgress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceUsageEgress", reflect.TypeOf((*MockDB)(nil).GetInterfaceUsageEgress), arg0, arg1)
}

// GetInterfaceUsageIngress mocks base method.
func (m *MockDB) GetInterfaceUsageIngress(arg0 context.Context, arg1 uint16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceUsageIngress", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterfaceUsageIngress indicates an expected call of GetInterfaceUsageIngress.
func (mr *MockDBMockRecorder) GetInterfaceUsageIngress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceUsageIngress", reflect.TypeOf((*MockDB)(nil).GetInterfaceUsageIngress), arg0, arg1)
}

// GetSegmentRsvFromID mocks base method.
func (m *MockDB) GetSegmentRsvFromID(arg0 context.Context, arg1 *reservation.ID) (*segment.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentRsvFromID", arg0, arg1)
	ret0, _ := ret[0].(*segment.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentRsvFromID indicates an expected call of GetSegmentRsvFromID.
func (mr *MockDBMockRecorder) GetSegmentRsvFromID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentRsvFromID", reflect.TypeOf((*MockDB)(nil).GetSegmentRsvFromID), arg0, arg1)
}

// GetSegmentRsvsFromIFPair mocks base method.
func (m *MockDB) GetSegmentRsvsFromIFPair(arg0 context.Context, arg1, arg2 *uint16) ([]*segment.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentRsvsFromIFPair", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*segment.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentRsvsFromIFPair indicates an expected call of GetSegmentRsvsFromIFPair.
func (mr *MockDBMockRecorder) GetSegmentRsvsFromIFPair(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentRsvsFromIFPair", reflect.TypeOf((*MockDB)(nil).GetSegmentRsvsFromIFPair), arg0, arg1, arg2)
}

// GetSegmentRsvsFromSrcDstIA mocks base method.
func (m *MockDB) GetSegmentRsvsFromSrcDstIA(arg0 context.Context, arg1, arg2 addr.IA, arg3 reservation.PathType) ([]*segment.Reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentRsvsFromSrcDstIA", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*segment.Reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSegmentRsvsFromSrcDstIA indicates an expected call of GetSegmentRsvsFromSrcDstIA.
func (mr *MockDBMockRecorder) GetSegmentRsvsFromSrcDstIA(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentRsvsFromSrcDstIA", reflect.TypeOf((*MockDB)(nil).GetSegmentRsvsFromSrcDstIA), arg0, arg1, arg2, arg3)
}

// GetSourceState mocks base method.
func (m *MockDB) GetSourceState(arg0 context.Context, arg1 addr.AS, arg2, arg3 uint16) (uint64, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceState", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSourceState indicates an expected call of GetSourceState.
func (mr *MockDBMockRecorder) GetSourceState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceState", reflect.TypeOf((*MockDB)(nil).GetSourceState), arg0, arg1, arg2, arg3)
}

// GetTransitAlloc mocks base method.
func (m *MockDB) GetTransitAlloc(arg0 context.Context, arg1, arg2 uint16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitAlloc", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitAlloc indicates an expected call of GetTransitAlloc.
func (mr *MockDBMockRecorder) GetTransitAlloc(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitAlloc", reflect.TypeOf((*MockDB)(nil).GetTransitAlloc), arg0, arg1, arg2)
}

// GetTransitDem mocks base method.
func (m *MockDB) GetTransitDem(arg0 context.Context, arg1, arg2 uint16) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitDem", arg0, arg1, arg2)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransitDem indicates an expected call of GetTransitDem.
func (mr *MockDBMockRecorder) GetTransitDem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitDem", reflect.TypeOf((*MockDB)(nil).GetTransitDem), arg0, arg1, arg2)
}

// NewSegmentRsv mocks base method.
func (m *MockDB) NewSegmentRsv(arg0 context.Context, arg1 *segment.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSegmentRsv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSegmentRsv indicates an expected call of NewSegmentRsv.
func (mr *MockDBMockRecorder) NewSegmentRsv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSegmentRsv", reflect.TypeOf((*MockDB)(nil).NewSegmentRsv), arg0, arg1)
}

// NextExpirationTime mocks base method.
func (m *MockDB) NextExpirationTime(arg0 context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextExpirationTime", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextExpirationTime indicates an expected call of NextExpirationTime.
func (mr *MockDBMockRecorder) NextExpirationTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextExpirationTime", reflect.TypeOf((*MockDB)(nil).NextExpirationTime), arg0)
}

// PersistE2ERsv mocks base method.
func (m *MockDB) PersistE2ERsv(arg0 context.Context, arg1 *e2e.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistE2ERsv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistE2ERsv indicates an expected call of PersistE2ERsv.
func (mr *MockDBMockRecorder) PersistE2ERsv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistE2ERsv", reflect.TypeOf((*MockDB)(nil).PersistE2ERsv), arg0, arg1)
}

// PersistEgDemand mocks base method.
func (m *MockDB) PersistEgDemand(arg0 context.Context, arg1 addr.AS, arg2 uint16, arg3 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistEgDemand", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistEgDemand indicates an expected call of PersistEgDemand.
func (mr *MockDBMockRecorder) PersistEgDemand(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistEgDemand", reflect.TypeOf((*MockDB)(nil).PersistEgDemand), arg0, arg1, arg2, arg3)
}

// PersistInDemand mocks base method.
func (m *MockDB) PersistInDemand(arg0 context.Context, arg1 addr.AS, arg2 uint16, arg3 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistInDemand", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistInDemand indicates an expected call of PersistInDemand.
func (mr *MockDBMockRecorder) PersistInDemand(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistInDemand", reflect.TypeOf((*MockDB)(nil).PersistInDemand), arg0, arg1, arg2, arg3)
}

// PersistSegmentRsv mocks base method.
func (m *MockDB) PersistSegmentRsv(arg0 context.Context, arg1 *segment.Reservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistSegmentRsv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistSegmentRsv indicates an expected call of PersistSegmentRsv.
func (mr *MockDBMockRecorder) PersistSegmentRsv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistSegmentRsv", reflect.TypeOf((*MockDB)(nil).PersistSegmentRsv), arg0, arg1)
}

// PersistSourceState mocks base method.
func (m *MockDB) PersistSourceState(arg0 context.Context, arg1 addr.AS, arg2, arg3 uint16, arg4, arg5 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistSourceState", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistSourceState indicates an expected call of PersistSourceState.
func (mr *MockDBMockRecorder) PersistSourceState(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistSourceState", reflect.TypeOf((*MockDB)(nil).PersistSourceState), arg0, arg1, arg2, arg3, arg4, arg5)
}

// PersistTransitAlloc mocks base method.
func (m *MockDB) PersistTransitAlloc(arg0 context.Context, arg1, arg2 uint16, arg3 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistTransitAlloc", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistTransitAlloc indicates an expected call of PersistTransitAlloc.
func (mr *MockDBMockRecorder) PersistTransitAlloc(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistTransitAlloc", reflect.TypeOf((*MockDB)(nil).PersistTransitAlloc), arg0, arg1, arg2, arg3)
}

// PersistTransitDem mocks base method.
func (m *MockDB) PersistTransitDem(arg0 context.Context, arg1, arg2 uint16, arg3 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistTransitDem", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistTransitDem indicates an expected call of PersistTransitDem.
func (mr *MockDBMockRecorder) PersistTransitDem(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistTransitDem", reflect.TypeOf((*MockDB)(nil).PersistTransitDem), arg0, arg1, arg2, arg3)
}

// SetMaxIdleConns mocks base method.
func (m *MockDB) SetMaxIdleConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", arg0)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockDBMockRecorder) SetMaxIdleConns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockDB)(nil).SetMaxIdleConns), arg0)
}

// SetMaxOpenConns mocks base method.
func (m *MockDB) SetMaxOpenConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", arg0)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockDBMockRecorder) SetMaxOpenConns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockDB)(nil).SetMaxOpenConns), arg0)
}
