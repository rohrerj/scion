// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/proto/colibri (interfaces: ColibriServiceClient,ColibriServiceServer)

// Package mock_colibri is a generated GoMock package.
package mock_colibri

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	colibri "github.com/scionproto/scion/go/pkg/proto/colibri"
	grpc "google.golang.org/grpc"
)

// MockColibriServiceClient is a mock of ColibriServiceClient interface.
type MockColibriServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockColibriServiceClientMockRecorder
}

// MockColibriServiceClientMockRecorder is the mock recorder for MockColibriServiceClient.
type MockColibriServiceClientMockRecorder struct {
	mock *MockColibriServiceClient
}

// NewMockColibriServiceClient creates a new mock instance.
func NewMockColibriServiceClient(ctrl *gomock.Controller) *MockColibriServiceClient {
	mock := &MockColibriServiceClient{ctrl: ctrl}
	mock.recorder = &MockColibriServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColibriServiceClient) EXPECT() *MockColibriServiceClientMockRecorder {
	return m.recorder
}

// ActivateSegmentIndex mocks base method.
func (m *MockColibriServiceClient) ActivateSegmentIndex(arg0 context.Context, arg1 *colibri.ActivateSegmentIndexRequest, arg2 ...grpc.CallOption) (*colibri.ActivateSegmentIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateSegmentIndex", varargs...)
	ret0, _ := ret[0].(*colibri.ActivateSegmentIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateSegmentIndex indicates an expected call of ActivateSegmentIndex.
func (mr *MockColibriServiceClientMockRecorder) ActivateSegmentIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSegmentIndex", reflect.TypeOf((*MockColibriServiceClient)(nil).ActivateSegmentIndex), varargs...)
}

// ActiveIndices mocks base method.
func (m *MockColibriServiceClient) ActiveIndices(arg0 context.Context, arg1 *colibri.ActiveIndicesRequest, arg2 ...grpc.CallOption) (*colibri.ActiveIndicesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActiveIndices", varargs...)
	ret0, _ := ret[0].(*colibri.ActiveIndicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveIndices indicates an expected call of ActiveIndices.
func (mr *MockColibriServiceClientMockRecorder) ActiveIndices(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveIndices", reflect.TypeOf((*MockColibriServiceClient)(nil).ActiveIndices), varargs...)
}

// AddAdmissionEntry mocks base method.
func (m *MockColibriServiceClient) AddAdmissionEntry(arg0 context.Context, arg1 *colibri.AddAdmissionEntryRequest, arg2 ...grpc.CallOption) (*colibri.AddAdmissionEntryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAdmissionEntry", varargs...)
	ret0, _ := ret[0].(*colibri.AddAdmissionEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdmissionEntry indicates an expected call of AddAdmissionEntry.
func (mr *MockColibriServiceClientMockRecorder) AddAdmissionEntry(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmissionEntry", reflect.TypeOf((*MockColibriServiceClient)(nil).AddAdmissionEntry), varargs...)
}

// CleanupE2EIndex mocks base method.
func (m *MockColibriServiceClient) CleanupE2EIndex(arg0 context.Context, arg1 *colibri.CleanupE2EIndexRequest, arg2 ...grpc.CallOption) (*colibri.CleanupE2EIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanupE2EIndex", varargs...)
	ret0, _ := ret[0].(*colibri.CleanupE2EIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupE2EIndex indicates an expected call of CleanupE2EIndex.
func (mr *MockColibriServiceClientMockRecorder) CleanupE2EIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupE2EIndex", reflect.TypeOf((*MockColibriServiceClient)(nil).CleanupE2EIndex), varargs...)
}

// CleanupReservation mocks base method.
func (m *MockColibriServiceClient) CleanupReservation(arg0 context.Context, arg1 *colibri.CleanupReservationRequest, arg2 ...grpc.CallOption) (*colibri.CleanupReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanupReservation", varargs...)
	ret0, _ := ret[0].(*colibri.CleanupReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupReservation indicates an expected call of CleanupReservation.
func (mr *MockColibriServiceClientMockRecorder) CleanupReservation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupReservation", reflect.TypeOf((*MockColibriServiceClient)(nil).CleanupReservation), varargs...)
}

// CleanupSegmentIndex mocks base method.
func (m *MockColibriServiceClient) CleanupSegmentIndex(arg0 context.Context, arg1 *colibri.CleanupSegmentIndexRequest, arg2 ...grpc.CallOption) (*colibri.CleanupSegmentIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CleanupSegmentIndex", varargs...)
	ret0, _ := ret[0].(*colibri.CleanupSegmentIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupSegmentIndex indicates an expected call of CleanupSegmentIndex.
func (mr *MockColibriServiceClientMockRecorder) CleanupSegmentIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupSegmentIndex", reflect.TypeOf((*MockColibriServiceClient)(nil).CleanupSegmentIndex), varargs...)
}

// ConfirmSegmentIndex mocks base method.
func (m *MockColibriServiceClient) ConfirmSegmentIndex(arg0 context.Context, arg1 *colibri.ConfirmSegmentIndexRequest, arg2 ...grpc.CallOption) (*colibri.ConfirmSegmentIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmSegmentIndex", varargs...)
	ret0, _ := ret[0].(*colibri.ConfirmSegmentIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSegmentIndex indicates an expected call of ConfirmSegmentIndex.
func (mr *MockColibriServiceClientMockRecorder) ConfirmSegmentIndex(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSegmentIndex", reflect.TypeOf((*MockColibriServiceClient)(nil).ConfirmSegmentIndex), varargs...)
}

// E2ESetup mocks base method.
func (m *MockColibriServiceClient) E2ESetup(arg0 context.Context, arg1 *colibri.E2ESetupRequest, arg2 ...grpc.CallOption) (*colibri.E2ESetupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "E2ESetup", varargs...)
	ret0, _ := ret[0].(*colibri.E2ESetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// E2ESetup indicates an expected call of E2ESetup.
func (mr *MockColibriServiceClientMockRecorder) E2ESetup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "E2ESetup", reflect.TypeOf((*MockColibriServiceClient)(nil).E2ESetup), varargs...)
}

// ListReservations mocks base method.
func (m *MockColibriServiceClient) ListReservations(arg0 context.Context, arg1 *colibri.ListReservationsRequest, arg2 ...grpc.CallOption) (*colibri.ListReservationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReservations", varargs...)
	ret0, _ := ret[0].(*colibri.ListReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations.
func (mr *MockColibriServiceClientMockRecorder) ListReservations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockColibriServiceClient)(nil).ListReservations), varargs...)
}

// ListStitchables mocks base method.
func (m *MockColibriServiceClient) ListStitchables(arg0 context.Context, arg1 *colibri.ListStitchablesRequest, arg2 ...grpc.CallOption) (*colibri.ListStitchablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStitchables", varargs...)
	ret0, _ := ret[0].(*colibri.ListStitchablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStitchables indicates an expected call of ListStitchables.
func (mr *MockColibriServiceClientMockRecorder) ListStitchables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStitchables", reflect.TypeOf((*MockColibriServiceClient)(nil).ListStitchables), varargs...)
}

// SegmentSetup mocks base method.
func (m *MockColibriServiceClient) SegmentSetup(arg0 context.Context, arg1 *colibri.SegmentSetupRequest, arg2 ...grpc.CallOption) (*colibri.SegmentSetupResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SegmentSetup", varargs...)
	ret0, _ := ret[0].(*colibri.SegmentSetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SegmentSetup indicates an expected call of SegmentSetup.
func (mr *MockColibriServiceClientMockRecorder) SegmentSetup(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentSetup", reflect.TypeOf((*MockColibriServiceClient)(nil).SegmentSetup), varargs...)
}

// SetupReservation mocks base method.
func (m *MockColibriServiceClient) SetupReservation(arg0 context.Context, arg1 *colibri.SetupReservationRequest, arg2 ...grpc.CallOption) (*colibri.SetupReservationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetupReservation", varargs...)
	ret0, _ := ret[0].(*colibri.SetupReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupReservation indicates an expected call of SetupReservation.
func (mr *MockColibriServiceClientMockRecorder) SetupReservation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupReservation", reflect.TypeOf((*MockColibriServiceClient)(nil).SetupReservation), varargs...)
}

// TeardownSegment mocks base method.
func (m *MockColibriServiceClient) TeardownSegment(arg0 context.Context, arg1 *colibri.TeardownSegmentRequest, arg2 ...grpc.CallOption) (*colibri.TeardownSegmentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TeardownSegment", varargs...)
	ret0, _ := ret[0].(*colibri.TeardownSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeardownSegment indicates an expected call of TeardownSegment.
func (mr *MockColibriServiceClientMockRecorder) TeardownSegment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownSegment", reflect.TypeOf((*MockColibriServiceClient)(nil).TeardownSegment), varargs...)
}

// MockColibriServiceServer is a mock of ColibriServiceServer interface.
type MockColibriServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockColibriServiceServerMockRecorder
}

// MockColibriServiceServerMockRecorder is the mock recorder for MockColibriServiceServer.
type MockColibriServiceServerMockRecorder struct {
	mock *MockColibriServiceServer
}

// NewMockColibriServiceServer creates a new mock instance.
func NewMockColibriServiceServer(ctrl *gomock.Controller) *MockColibriServiceServer {
	mock := &MockColibriServiceServer{ctrl: ctrl}
	mock.recorder = &MockColibriServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColibriServiceServer) EXPECT() *MockColibriServiceServerMockRecorder {
	return m.recorder
}

// ActivateSegmentIndex mocks base method.
func (m *MockColibriServiceServer) ActivateSegmentIndex(arg0 context.Context, arg1 *colibri.ActivateSegmentIndexRequest) (*colibri.ActivateSegmentIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSegmentIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.ActivateSegmentIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateSegmentIndex indicates an expected call of ActivateSegmentIndex.
func (mr *MockColibriServiceServerMockRecorder) ActivateSegmentIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSegmentIndex", reflect.TypeOf((*MockColibriServiceServer)(nil).ActivateSegmentIndex), arg0, arg1)
}

// ActiveIndices mocks base method.
func (m *MockColibriServiceServer) ActiveIndices(arg0 context.Context, arg1 *colibri.ActiveIndicesRequest) (*colibri.ActiveIndicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveIndices", arg0, arg1)
	ret0, _ := ret[0].(*colibri.ActiveIndicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveIndices indicates an expected call of ActiveIndices.
func (mr *MockColibriServiceServerMockRecorder) ActiveIndices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveIndices", reflect.TypeOf((*MockColibriServiceServer)(nil).ActiveIndices), arg0, arg1)
}

// AddAdmissionEntry mocks base method.
func (m *MockColibriServiceServer) AddAdmissionEntry(arg0 context.Context, arg1 *colibri.AddAdmissionEntryRequest) (*colibri.AddAdmissionEntryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdmissionEntry", arg0, arg1)
	ret0, _ := ret[0].(*colibri.AddAdmissionEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdmissionEntry indicates an expected call of AddAdmissionEntry.
func (mr *MockColibriServiceServerMockRecorder) AddAdmissionEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmissionEntry", reflect.TypeOf((*MockColibriServiceServer)(nil).AddAdmissionEntry), arg0, arg1)
}

// CleanupE2EIndex mocks base method.
func (m *MockColibriServiceServer) CleanupE2EIndex(arg0 context.Context, arg1 *colibri.CleanupE2EIndexRequest) (*colibri.CleanupE2EIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupE2EIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.CleanupE2EIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupE2EIndex indicates an expected call of CleanupE2EIndex.
func (mr *MockColibriServiceServerMockRecorder) CleanupE2EIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupE2EIndex", reflect.TypeOf((*MockColibriServiceServer)(nil).CleanupE2EIndex), arg0, arg1)
}

// CleanupReservation mocks base method.
func (m *MockColibriServiceServer) CleanupReservation(arg0 context.Context, arg1 *colibri.CleanupReservationRequest) (*colibri.CleanupReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupReservation", arg0, arg1)
	ret0, _ := ret[0].(*colibri.CleanupReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupReservation indicates an expected call of CleanupReservation.
func (mr *MockColibriServiceServerMockRecorder) CleanupReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupReservation", reflect.TypeOf((*MockColibriServiceServer)(nil).CleanupReservation), arg0, arg1)
}

// CleanupSegmentIndex mocks base method.
func (m *MockColibriServiceServer) CleanupSegmentIndex(arg0 context.Context, arg1 *colibri.CleanupSegmentIndexRequest) (*colibri.CleanupSegmentIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupSegmentIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.CleanupSegmentIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupSegmentIndex indicates an expected call of CleanupSegmentIndex.
func (mr *MockColibriServiceServerMockRecorder) CleanupSegmentIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupSegmentIndex", reflect.TypeOf((*MockColibriServiceServer)(nil).CleanupSegmentIndex), arg0, arg1)
}

// ConfirmSegmentIndex mocks base method.
func (m *MockColibriServiceServer) ConfirmSegmentIndex(arg0 context.Context, arg1 *colibri.ConfirmSegmentIndexRequest) (*colibri.ConfirmSegmentIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmSegmentIndex", arg0, arg1)
	ret0, _ := ret[0].(*colibri.ConfirmSegmentIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSegmentIndex indicates an expected call of ConfirmSegmentIndex.
func (mr *MockColibriServiceServerMockRecorder) ConfirmSegmentIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSegmentIndex", reflect.TypeOf((*MockColibriServiceServer)(nil).ConfirmSegmentIndex), arg0, arg1)
}

// E2ESetup mocks base method.
func (m *MockColibriServiceServer) E2ESetup(arg0 context.Context, arg1 *colibri.E2ESetupRequest) (*colibri.E2ESetupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "E2ESetup", arg0, arg1)
	ret0, _ := ret[0].(*colibri.E2ESetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// E2ESetup indicates an expected call of E2ESetup.
func (mr *MockColibriServiceServerMockRecorder) E2ESetup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "E2ESetup", reflect.TypeOf((*MockColibriServiceServer)(nil).E2ESetup), arg0, arg1)
}

// ListReservations mocks base method.
func (m *MockColibriServiceServer) ListReservations(arg0 context.Context, arg1 *colibri.ListReservationsRequest) (*colibri.ListReservationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReservations", arg0, arg1)
	ret0, _ := ret[0].(*colibri.ListReservationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReservations indicates an expected call of ListReservations.
func (mr *MockColibriServiceServerMockRecorder) ListReservations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReservations", reflect.TypeOf((*MockColibriServiceServer)(nil).ListReservations), arg0, arg1)
}

// ListStitchables mocks base method.
func (m *MockColibriServiceServer) ListStitchables(arg0 context.Context, arg1 *colibri.ListStitchablesRequest) (*colibri.ListStitchablesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStitchables", arg0, arg1)
	ret0, _ := ret[0].(*colibri.ListStitchablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStitchables indicates an expected call of ListStitchables.
func (mr *MockColibriServiceServerMockRecorder) ListStitchables(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStitchables", reflect.TypeOf((*MockColibriServiceServer)(nil).ListStitchables), arg0, arg1)
}

// SegmentSetup mocks base method.
func (m *MockColibriServiceServer) SegmentSetup(arg0 context.Context, arg1 *colibri.SegmentSetupRequest) (*colibri.SegmentSetupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SegmentSetup", arg0, arg1)
	ret0, _ := ret[0].(*colibri.SegmentSetupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SegmentSetup indicates an expected call of SegmentSetup.
func (mr *MockColibriServiceServerMockRecorder) SegmentSetup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SegmentSetup", reflect.TypeOf((*MockColibriServiceServer)(nil).SegmentSetup), arg0, arg1)
}

// SetupReservation mocks base method.
func (m *MockColibriServiceServer) SetupReservation(arg0 context.Context, arg1 *colibri.SetupReservationRequest) (*colibri.SetupReservationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupReservation", arg0, arg1)
	ret0, _ := ret[0].(*colibri.SetupReservationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupReservation indicates an expected call of SetupReservation.
func (mr *MockColibriServiceServerMockRecorder) SetupReservation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupReservation", reflect.TypeOf((*MockColibriServiceServer)(nil).SetupReservation), arg0, arg1)
}

// TeardownSegment mocks base method.
func (m *MockColibriServiceServer) TeardownSegment(arg0 context.Context, arg1 *colibri.TeardownSegmentRequest) (*colibri.TeardownSegmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeardownSegment", arg0, arg1)
	ret0, _ := ret[0].(*colibri.TeardownSegmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeardownSegment indicates an expected call of TeardownSegment.
func (mr *MockColibriServiceServerMockRecorder) TeardownSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownSegment", reflect.TypeOf((*MockColibriServiceServer)(nil).TeardownSegment), arg0, arg1)
}
