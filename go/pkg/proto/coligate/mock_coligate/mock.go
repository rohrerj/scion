// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/scionproto/scion/go/pkg/proto/coligate (interfaces: ColibriGatewayClient,ColibriGatewayServer)

// Package mock_coligate is a generated GoMock package.
package mock_coligate

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	coligate "github.com/scionproto/scion/go/pkg/proto/coligate"
	grpc "google.golang.org/grpc"
)

// MockColibriGatewayClient is a mock of ColibriGatewayClient interface.
type MockColibriGatewayClient struct {
	ctrl     *gomock.Controller
	recorder *MockColibriGatewayClientMockRecorder
}

// MockColibriGatewayClientMockRecorder is the mock recorder for MockColibriGatewayClient.
type MockColibriGatewayClientMockRecorder struct {
	mock *MockColibriGatewayClient
}

// NewMockColibriGatewayClient creates a new mock instance.
func NewMockColibriGatewayClient(ctrl *gomock.Controller) *MockColibriGatewayClient {
	mock := &MockColibriGatewayClient{ctrl: ctrl}
	mock.recorder = &MockColibriGatewayClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColibriGatewayClient) EXPECT() *MockColibriGatewayClientMockRecorder {
	return m.recorder
}

// UpdateSigmas mocks base method.
func (m *MockColibriGatewayClient) UpdateSigmas(arg0 context.Context, arg1 *coligate.UpdateSigmasRequest, arg2 ...grpc.CallOption) (*coligate.UpdateSigmasResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSigmas", varargs...)
	ret0, _ := ret[0].(*coligate.UpdateSigmasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSigmas indicates an expected call of UpdateSigmas.
func (mr *MockColibriGatewayClientMockRecorder) UpdateSigmas(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSigmas", reflect.TypeOf((*MockColibriGatewayClient)(nil).UpdateSigmas), varargs...)
}

// MockColibriGatewayServer is a mock of ColibriGatewayServer interface.
type MockColibriGatewayServer struct {
	ctrl     *gomock.Controller
	recorder *MockColibriGatewayServerMockRecorder
}

// MockColibriGatewayServerMockRecorder is the mock recorder for MockColibriGatewayServer.
type MockColibriGatewayServerMockRecorder struct {
	mock *MockColibriGatewayServer
}

// NewMockColibriGatewayServer creates a new mock instance.
func NewMockColibriGatewayServer(ctrl *gomock.Controller) *MockColibriGatewayServer {
	mock := &MockColibriGatewayServer{ctrl: ctrl}
	mock.recorder = &MockColibriGatewayServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColibriGatewayServer) EXPECT() *MockColibriGatewayServerMockRecorder {
	return m.recorder
}

// UpdateSigmas mocks base method.
func (m *MockColibriGatewayServer) UpdateSigmas(arg0 context.Context, arg1 *coligate.UpdateSigmasRequest) (*coligate.UpdateSigmasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSigmas", arg0, arg1)
	ret0, _ := ret[0].(*coligate.UpdateSigmasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSigmas indicates an expected call of UpdateSigmas.
func (mr *MockColibriGatewayServerMockRecorder) UpdateSigmas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSigmas", reflect.TypeOf((*MockColibriGatewayServer)(nil).UpdateSigmas), arg0, arg1)
}
