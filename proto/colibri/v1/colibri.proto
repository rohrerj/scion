// Copyright 2021 ETH Zurich
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/scionproto/scion/go/pkg/proto/colibri";

package proto.colibri.v1;


service ColibriService {
    // Segment RPCs:

    // set up or renew a segment reservation.
    rpc SegmentSetup(SegmentSetupRequest) returns (SegmentSetupResponse) {}
    // confirm a segment reservation.
    rpc ConfirmSegmentIndex(ConfirmSegmentIndexRequest) returns (ConfirmSegmentIndexResponse) {}
    // activate a segment reservation.
    rpc ActivateSegmentIndex(ActivateSegmentIndexRequest) returns (ActivateSegmentIndexResponse) {}
    // teardown (remove) a segment reservation.
    rpc TeardownSegment(TeardownSegmentRequest) returns (TeardownSegmentResponse) {}
    // clean up a segment reservation index.
    rpc CleanupSegmentIndex(CleanupSegmentIndexRequest) returns (CleanupSegmentIndexResponse) {}

    // E2E RPCs:

    // list segment reservations registered in this AS.
    rpc ListReservations(ListReservationsRequest) returns (ListReservationsResponse) {}
    // set up or renew an EER.
    rpc E2ESetup(E2ESetupRequest) returns (E2ESetupResponse) {}
    // clean up an EER index.
    rpc CleanupE2EIndex(CleanupE2EIndexRequest) returns (CleanupE2EIndexResponse) {}

    // Intra AS RPCs:
    // list segment resrvations.
    rpc ListStitchables(ListStitchablesRequest) returns (ListStitchablesResponse) {}
    // create or renew an EER.
    rpc SetupReservation(SetupReservationRequest) returns (SetupReservationResponse) {}
    // cleanup (remove) an EER.
    rpc CleanupReservation(CleanupReservationRequest) returns (CleanupReservationResponse) {}
    // add a new admission entry to the admission table (as a server).
    rpc AddAdmissionEntry(AddAdmissionEntryRequest) returns (AddAdmissionEntryResponse) {}

    // Interaction with the Gateway:
    rpc ActiveIndices(ActiveIndicesRequest) returns (ActiveIndicesResponse) {}
}

// /////////////////////////////////////////////////

message ReservationID {
    // the ASID as uint64 (ISD is 0).
    uint64 asid = 1;
    // the suffix. It will be either IDSegLen or IDE2ELen.
    bytes suffix = 2;
}

message PathEndProps {
    // the reservation ends/starts here.
    bool local = 1;
    // the reservation can be stiched at the start/end.
    bool transfer = 2;
}

message AllocationBead {
    // the allocated bw class.
    uint32 allocbw = 1;
    // the maximum bandwidth class requested.
    uint32 maxbw = 2;
}

message PathStep {
    // the full IA.
    uint64 ia = 1;
    // ingress ID (16 bits).
    uint32 ingress = 2;
    // egress ID (16 bits).
    uint32 egress =3;
}

message Authenticators {
    // A collection of MAC bytes, computed by the source AS with the original data, and then
    // overwritten at each step of the path by the AS in transit.
    repeated bytes macs = 1;
}

////////////////////////////////////////

message Request {
    // the reservation ID the request refers to.
    ReservationID id = 1;
    // the index (4 bits). For new setups it is zero.
    uint32 index = 2;
    // the timestamp when the request was issued.
    uint32 timestamp = 3;
    // drkey authenticators.
    Authenticators authenticators = 4;
}

message Response {
    message Success {}
    message Failure {
        // the error identifying code.
        uint32 error_code = 1; // TODO(juagargi) currently unused
        // a human readable description of the error.
        string message = 2;
        // the index of the step in the path that the request traversed where the error occurred.
        uint32 failing_hop = 3;
    }

    oneof success_failure {
        // a success field representing a successful response.
        Success success = 1;
        // a failure field representing a failure message.
        Failure failure = 2;
    }
    // the timestamp when the response was issued.
    uint32 timestamp = 3;
    // drkey authenticators.
    Authenticators authenticators = 4;
}

message SegmentSetupRequest {
    message Params {
        // the expiration time of the requested reservation, setup by the source.
        uint32 expiration_time = 1;
        // the request latency class, encodes a RLC of 6 bits.
        uint32 rlc = 2;
        // the reservation path type, encodes a PathType (currently 1 byte).
        uint32 path_type = 3;
        // the requested minimum BW class, encodes a BWCls of 6 bits.
        uint32 minbw = 4;
        // the maximum requested BW class, BWCls of 6 bits.
        uint32 maxbw = 5;
        // the split class, partitioning the SegR. in control and data plane traffic. SlitCls, 1 byte.
        uint32 splitcls = 6;
        // the properties (L and/or T) at the source of the reservation.
        PathEndProps props_at_start = 7;
        // the properties (L and/or T) at the destination of the reservation.
        PathEndProps props_at_end = 8;
        // the allocation trail of this request. Allows to check which AS gave how much BW.
        repeated AllocationBead allocationtrail = 9;
        // when a down rsv., indicates the req. is just traveling to the last AS to be
        // re-requested from there (admission is done in the direction of the reservation).
        bool reverse_traveling = 10;
        uint32 currentStep = 11;
        // the path the request will follow.
        repeated PathStep steps = 12;
    }

    // the basic parameters of the request: ID, index, timestamp and path.
    Request base = 1;
    // the setup parameters of the request.
    Params params = 2;
}

message SegmentSetupResponse {
    message Failure {
        // the basic failure field: error code, message and failing AS index.
        Response.Failure failure = 1;
        // the request that originated this failure.
        SegmentSetupRequest.Params request = 2;
    }

    oneof success_failure {
        // the token to store at the source of the reservation, if successful.
        bytes token = 1;
        // if failure, this field will not be null, and will contain the failure message.
        Failure failure = 2;
    }
    // the timestamp when the response was issued.
    uint32 timestamp = 3;
    // drkey authenticators.
    Authenticators authenticators = 4;
}

message ConfirmSegmentIndexRequest {
    // the basic request
    Request base = 1;
}

message ConfirmSegmentIndexResponse {
    // the basic response
    Response base = 1;
}

message ActivateSegmentIndexRequest {
    // the basic request
    Request base = 1;
}

message ActivateSegmentIndexResponse {
    // the basic response
    Response base = 1;
}

message TeardownSegmentRequest {
    // the basic request
    Request base = 1;
}

message TeardownSegmentResponse {
    // the basic response
    Response base = 1;
}

message CleanupSegmentIndexRequest {
    // the basic request
    Request base = 1;
}

message CleanupSegmentIndexResponse {
    // the basic response
    Response base = 1;
}

message ListReservationsRequest {
    // the destination IA. The source is the receiver of the message.
    uint64 dst_ia = 1;
    // the reservation path type.
    uint32 path_type = 2;
    // drkey authenticators.
    Authenticators authenticators = 3;
}

message ListReservationsResponse {
    // the reservation looks represent the public values a reservation has, as registered.
    // These values can be later used to filter, sort them, etc.
    message ReservationLooks {
        // the reservation ID for which this message describe its established parameters.
        ReservationID id = 1;
        // source of the reservation.
        uint64 src_ia = 2;
        // destination of the reservation.
        uint64 dst_ia = 3;
        // the expiration time of the reservation.
        uint32 expiration_time = 4;
        // minimum BW as recorded in the reservation.
        uint32 minbw = 5;
        // maximum bandwidth.
        uint32 maxbw = 6;
        // the actual allocated bandwidth for the reservation.
        uint32 allocbw = 7;
        // split class
        uint32 splitcls = 8;
        // the path (sequence of AS steps) of this reservation.
        repeated PathStep path_steps = 9;
    }
    // human readable error message or nil if this response is not an error.
    string error_message = 1;
    // the collection of reservations for the list request.
    repeated ReservationLooks reservations = 2;
    // drkey authenticators.
    Authenticators authenticators = 3;
}


message E2ERequest {
    // the basic request
    Request base = 1;
    // address of the source host.
    bytes src_host = 2;
    // address of the destination host.
    bytes dst_host = 3;
}

message E2ESetupRequest {
    message PathParams {
        // the IDs of the segments to stitch for this e2e reservation, in traversal order.
        repeated ReservationID segments = 1;
        // index of the current segment.
        // If the node is transfer, the first segment it belongs to.
        uint32 current_segment = 2;
        // current index in the steps sequence.
        uint32 current_step = 4;
        // the path the request will follow.
        repeated PathStep steps = 5;
    }
    message E2ESetupBead {
        // each on path AS writes here the max. BW it's willing to give.
        uint32 maxbw = 1;
    }

    // the base request. The path included here is from src to dst, so the full path.
    E2ERequest base = 1;
    // the requested bw.
    uint32 requested_bw = 2;
    // the parameters of the request.
    PathParams params = 3;
    // the allocation trail. All on path ASes will write an entry,
    // to know which AS are willing to grant how much.
    repeated E2ESetupBead allocationtrail = 4;
}

message E2ESetupResponse {
    message Failure {
        // a human readable error message.
        string message = 1;
        // the index of the path step that originated an error.
        uint32 failed_step = 2;
        // the allocation trail, as described above.
        repeated E2ESetupRequest.E2ESetupBead allocationtrail = 3;
    }
    // if present: information about the failure
    Failure failure = 1;
    // if successful, the serialized token.
    bytes token = 2;
    // the timestamp when the response was issued.
    uint32 timestamp = 3;
    // drkey authenticators.
    Authenticators authenticators = 4;
}

message CleanupE2EIndexRequest {
    // the basic request
    E2ERequest base = 1;
}

message CleanupE2EIndexResponse {
    // the basic response
    Response base = 1;
}

message ListStitchablesRequest {
    // the destination IA. The source is the receiver of the message.
    uint64 dst_ia = 1;
}

message ListStitchablesResponse {
    // human readable error message.
    string error_message = 1;
    // src IA.
    uint64 src_ia = 2;
    // dst IA.
    uint64 dst_ia = 3;
    // SegRs of type up.
    repeated ListReservationsResponse.ReservationLooks up = 4;
    // SegRs of type core.
    repeated ListReservationsResponse.ReservationLooks core = 5;
    // SegRs of type down.
    repeated ListReservationsResponse.ReservationLooks down = 6;
}

// SetupReservationRequest is sent from the endhost to the colibri service.
// The message doesn't have a src_host because the service will automatically use the
// source address of the TCP connection.
// TODO(juagargi): the previous sentence is no longer true. Should we allow src_host to be
// nil and thus set by the service?
message SetupReservationRequest {
    // the E2E reservation ID.
    ReservationID id = 1;
    // the E2E index.
    uint32 index = 2;
    // the timestamp when the request was issued.
    uint32 timestamp = 3;
    // address of the source host. Must match the IP used in authenticators.
    bytes src_host = 4;
    // address of the destination host.
    bytes dst_host = 5;
    // the requested BW.
    uint32 requested_bw = 6;
    // the SegR IDs to stitch for this EER.
    repeated ReservationID segments = 7;
    // the transport path.
    repeated PathStep path_steps = 8;
    // drkey authenticators.
    Authenticators authenticators = 9;
}

message SetupReservationResponse {
    message Failure {
        // a human readable error message.
        string error_message = 1;
        // the index of the path step that originated the failure.
        uint32 failed_step = 2;
        // the allocation trail.
        repeated uint32 alloc_trail = 3;
    }
    message Success {
        // the byte-encoded raw path.
        bytes raw_path = 1;
        // the string encoded address of the next hop (the border router to use at the source AS).
        string next_hop = 2;
    }
    // if present: information about the failure
    Failure failure = 1;
    // should be present if failure == nil
    Success success = 2;
    // the timestamp when the response was issued.
    uint32 timestamp = 3;
    // drkey authenticators.
    Authenticators authenticators = 4;
}

message CleanupReservationRequest {
    // the basic request.
    Request base = 1;
    // address of the source host.
    bytes src_host = 2;
    // address of the destination host.
    bytes dst_host = 3;
    // the path the request will follow.
    repeated PathStep steps = 4;

}

message CleanupReservationResponse {
    message Failure {
        // a human readable error message.
        string error_message = 1;
        // the index of the path step that originated the failure.
        uint32 failed_step = 2;
    }
    // failure has the failure message, or nil if all ok.
    Failure failure = 1;
    // the timestamp when the response was issued.
    uint32 timestamp = 2;
    // drkey authenticators.
    Authenticators authenticators = 3;
}

message AddAdmissionEntryRequest {
    // the address of the owner host (the reservation destination).
    bytes dst_host = 1;
    // validity of the entry.
    uint32 valid_until = 2;
    // regular expression matching the source IA.
    string regexp_ia = 3;
    // regular expression matching the source host address.
    string regexp_host = 4;
    // if the entry matches the EER request, the field accept indicates whether to accept of reject the request.
    bool accept = 5;
}

message AddAdmissionEntryResponse {
    // the validity of the proposed admission entry, possibly corrected at the COLIBRI service.
    uint32 valid_until = 1;
}

message ActiveIndicesRequest {
    string coligate_id = 1;
}

message ActiveIndicesResponse {
    message Reservation {
        // the reservation ID the request refers to.
        ReservationID id = 1;
        // egress ID (16 bits).
        uint32 egress = 2;
        // the active versions of the current reservation
        repeated ReservationIndex indices = 3;
    }
    message ReservationIndex {
        // the index number (4 bits, 0 to 15).
        uint32 index = 1;
        // the expiration time of the index.
        uint32 expiration_time = 2;
        // the bandwidth allocated to the index.
        uint32 allocBw = 3;
        // the N sigmas of the N ASes in the path.
        repeated bytes sigmas = 4;
    }

    repeated Reservation reservations = 1;
}
